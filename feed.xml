<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description></description>
    <link>https://blog.zwt.io/</link>
    <atom:link href="https://blog.zwt.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 06 Apr 2021 08:09:28 +0000</pubDate>
    <lastBuildDate>Tue, 06 Apr 2021 08:09:28 +0000</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
      <item>
        <title>安装Spring Boot应用(作为系统服务)</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;本文介绍将 Spring Boot 应用打包为可执行 jar 文件,并将其安装到 Linux 系统作为 &lt;code&gt;init.d&lt;/code&gt; 服务或 &lt;code&gt;systemd&lt;/code&gt; 服务。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;安装-spring-boot-应用作为系统服务&quot;&gt;安装 Spring Boot 应用(作为系统服务)&lt;/h3&gt;

&lt;p&gt;以 jar 形式打包的 Spring  Boot 应用可以使用命令 &lt;code&gt;java -jar&lt;/code&gt; 运行，但也可以将它作为 Unix 环境的完全可执行文件的形式。一个完全可执行的 jar 可以像其它任何二进制可执行文件那样被执行，或者也可以注册到 &lt;code&gt;init.d&lt;/code&gt; 或 &lt;code&gt;systemd&lt;/code&gt;。这样的方式有助于在常见的生产环境中安装和管理 Spring Boot 应用。&lt;/p&gt;

&lt;p&gt;要在 Maven 创建一个完全可执行的 jar， 使用以下插件配置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;plugin&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
    &amp;lt;configuration&amp;gt;
        &amp;lt;executable&amp;gt;true&amp;lt;/executable&amp;gt;
    &amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果使用 Gradle 就用下面的配置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;bootJar {
	launchScript()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成的可执行 jar 可以通过命令 &lt;code&gt;./my-application.jar&lt;/code&gt; (其中 &lt;code&gt;my-application&lt;/code&gt; 是你的应用 artifact 名称)。包含这个 jar 的目录会用作应用程序的工作目录。&lt;/p&gt;

&lt;h4 id=&quot;1-支持的操作系统&quot;&gt;1. 支持的操作系统&lt;/h4&gt;

&lt;p&gt;默认的脚本支持大部分 Linux 发行版而且已在 CentOS 和 Ubuntu 上测试过。 其它系统，例如 OS X 和 FreeBSD，需要使用自定义的 &lt;code&gt;embeddedLaunchScript&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;2-unixlinux-服务&quot;&gt;2. Unix/Linux 服务&lt;/h4&gt;

&lt;p&gt;Spring Boot 应用可以容易地作为 Unix/Linux service 让 &lt;code&gt;init.d&lt;/code&gt; 或 &lt;code&gt;systemd&lt;/code&gt; 去启动。&lt;/p&gt;

&lt;h5 id=&quot;21-安装为-initd-服务-system-v&quot;&gt;2.1 安装为 init.d 服务 (System V)&lt;/h5&gt;

&lt;p&gt;前面步骤生成的可执行 jar 可以用于 &lt;code&gt;init.d&lt;/code&gt; service。 只需要符号连接到 &lt;code&gt;init.d&lt;/code&gt; 就可以支持标准的 &lt;code&gt;start&lt;/code&gt;，&lt;code&gt;stop&lt;/code&gt;，&lt;code&gt;restart&lt;/code&gt;，以及 &lt;code&gt;status&lt;/code&gt; 命令。&lt;/p&gt;

&lt;p&gt;其中的脚本支持下列特性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;以 jar 文件拥有者的用户去启动服务&lt;/li&gt;
  &lt;li&gt;通过使用 &lt;code&gt;/var/run/&amp;lt;appname&amp;gt;/&amp;lt;appname&amp;gt;.pid&lt;/code&gt; 追踪应用程序的 PID&lt;/li&gt;
  &lt;li&gt;将控制台输出的日志写到 &lt;code&gt;/var/log/&amp;lt;appname&amp;gt;.log&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;假设你有个 Spring Boot 应用安装在 &lt;code&gt;/var/myapp&lt;/code&gt; ，那么要将它安装为一个 &lt;code&gt;init.d&lt;/code&gt; 服务，可以按以下命令创建一个符号连接：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ sudo ln -s /var/myapp/myapp.jar /etc/init.d/myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一旦安装完成，你就可以按照常规方式去启动和停止服务了。例如，在基于 Debian 的系统，你可以用以下命令启动：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ service myapp start
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;❗  如果应用程序启动失败，请检查写到 &lt;code&gt;var/log/&amp;lt;appname&amp;gt;.log&lt;/code&gt; 的日志。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你也可以用操作系统的标准工具去将应用设为自动启动。例如，在基于 Debian 的系统，可以使用以下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ update-rc.d myapp defaults &amp;lt;priority&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&quot;保护-initd-服务&quot;&gt;保护 init.d 服务&lt;/h6&gt;

&lt;blockquote&gt;
  &lt;p&gt;❕ 以下是一些关于以 init.d service 方式运行 Spring Boot 应用需要注意的一些安全问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当以 root 执行，即用 root 用户去启动 init.d 的 service，默认的可执行脚本会以环境变量 &lt;code&gt;RUN_AS_USER&lt;/code&gt; 所指定的用户去运行应用。当环境变量没有设置，就会以 jar 文件的拥有者用户去执行。你绝不应该以 root 用户运行 Spring Boot 应用，即 &lt;code&gt;RUN_AS_USER&lt;/code&gt; 绝不应该设为 root，且你的应用的 jar 文件的拥有者不应该是 root。适当的做法是创建一个专门的用户用于运行应用，并设置 &lt;code&gt;RUN_AS_USER&lt;/code&gt; 环境变量的值为该用户，或者使用 &lt;code&gt;chown&lt;/code&gt; 去将其设为 jar 文件的拥有者，如以下命令所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ chown bootapp:bootapp your-app.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这情况下，默认的可执行脚本会以 &lt;code&gt;bootapp&lt;/code&gt; 用户去运行应用。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;💡 为降低应用程序的用户被黑，应该考虑禁用它的登录shell，例如，将那个帐户的shell为 &lt;code&gt;/usr/sbin/nologin&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;应该对应用程序的 jar 文件设置适当的权限，防止被修改。首先，权限设为不可写，只允许它的拥有者读或执行，如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ chmod 500 your-app.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来，限制当帐户被黑了的破坏范围。如果被黑了，黑客可以将 jar 文件设为可写的并修改它的内容。其中一种防护方式是将它设置为不可修改的，通过使用 &lt;code&gt;chattr&lt;/code&gt; 命令，命令如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo chattr +i your-app.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这会防止任何用户，包括 root 修改 jar 的内容。&lt;/p&gt;

&lt;p&gt;如果 root 用于控制应用程序的 service，而且你使用 &lt;code&gt;.conf&lt;/code&gt; 文件去自定义应用的启动，然后 &lt;code&gt;.conf&lt;/code&gt; 文件被 root 用户读取并生效的。那么那文件也应该相应地做保护。使用 &lt;code&gt;chmod&lt;/code&gt; 设置那文件只允许它的拥有者读取，并将 root 设为拥有者，如以下命令所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ chmod 400 your-app.conf
$ sudo chown root:root your-app.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;22-安装为一个-systemd-service&quot;&gt;&lt;strong&gt;2.2. 安装为一个 systemd Service&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;systemd&lt;/code&gt; 是 System V init system 的继任者，并已被很多现代 Linux 发行版采用。尽管你可以继续在 &lt;code&gt;systemd&lt;/code&gt; 使用 &lt;code&gt;init.d&lt;/code&gt; 脚本，它也可以使用 &lt;code&gt;systemd&lt;/code&gt; ‘service’ 脚本去启动 Spring Boot 应用程序的。&lt;/p&gt;

&lt;p&gt;假设你有个 Spring Boot 应用安装在 &lt;code&gt;/var/myapp&lt;/code&gt;，要将 Spring Boot 应用程序安装为 &lt;code&gt;systemd&lt;/code&gt; 服务，你需要创建一个名为 &lt;code&gt;myapp.service&lt;/code&gt; 的脚本，并放到 &lt;code&gt;/etc/systemd/system&lt;/code&gt; 目录。以下脚本提供作为例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[Unit]
Description=myapp
After=syslog.target

[Service]
User=myapp
ExecStart=/var/myapp/myapp.jar
SuccessExitStatus=143

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;❗ 记得修改 &lt;code&gt;Description&lt;/code&gt;, &lt;code&gt;User&lt;/code&gt; 和 &lt;code&gt;ExecStart&lt;/code&gt; 字段为自己的应用程序。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;❕ 那个 &lt;code&gt;ExecStart&lt;/code&gt; 字段没有声明脚本的动作命令，这意味着默认使用 &lt;code&gt;run&lt;/code&gt; 命令&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;注意，不像使用 &lt;code&gt;init.d&lt;/code&gt; service 运行的那样，运行应用的用户，PID 文件，还有控制台输出日志文件都是由 &lt;code&gt;systemd&lt;/code&gt; 本身管理的，因此，&lt;strong&gt;必须&lt;/strong&gt;在 ‘service’ 脚本中使用适当的字段进行配置。详细配置方式可以参考 &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.service.html&quot;&gt;service unit configuration man page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;要将应用设置为开机启动，可以使用以下命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ systemctl enable myapp.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;详情可参考 &lt;code&gt;man systemctl&lt;/code&gt; 。&lt;/p&gt;

&lt;h5 id=&quot;23-自定义启动脚本&quot;&gt;2.3. 自定义启动脚本&lt;/h5&gt;

&lt;p&gt;由 Maven 或 Gradle 插件写的内置启动脚本有好几种自定义的方式。对于大多数人而言，使用默认脚本和添加一些新的自定义配置通常就够了。如果发现没法自定义某些需要的东西，那使用 &lt;code&gt;embeddedLaunchScript&lt;/code&gt; 选项去写你自己的版本。&lt;/p&gt;

&lt;h6 id=&quot;在写入过程自定义启动脚本&quot;&gt;在写入过程自定义启动脚本&lt;/h6&gt;

&lt;p&gt;通常在启动脚本被写入到 jar 文件的过程时去自定义脚本的元素是合理的。例如, init.d 脚本可以提供一个 “description”. 因为你提前就知道了 description (而且不需要变更),你可能也会在 jar 生成时候提供它。&lt;/p&gt;

&lt;p&gt;要自定义写入的元素,使用Spring Boot Maven 插件的 &lt;code&gt;embeddedLaunchScriptProperties&lt;/code&gt; 选项, &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.4.4/gradle-plugin/reference/htmlsingle/#packaging-executable-configuring-launch-script&quot;&gt;或 Spring Boot Gradle 插件的 &lt;code&gt;launchScript&lt;/code&gt; 的 &lt;code&gt;properpies&lt;/code&gt; 属性.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;默认脚本支持替换的属性如下:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;名称&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;描述&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Gradle 默认值&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Maven 默认值&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The script mode.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;initInfoProvides&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The &lt;code&gt;Provides&lt;/code&gt; section of “INIT INFO”&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;${task.baseName}&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;${project.artifactId}&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;initInfoRequiredStart&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Required-Start&lt;/code&gt; section of “INIT INFO”.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;$remote_fs $syslog $network&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;$remote_fs $syslog $network&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;initInfoRequiredStop&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Required-Stop&lt;/code&gt; section of “INIT INFO”.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;$remote_fs $syslog $network&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;$remote_fs $syslog $network&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;initInfoDefaultStart&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Default-Start&lt;/code&gt; section of “INIT INFO”.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;2 3 4 5&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;2 3 4 5&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;initInfoDefaultStop&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Default-Stop&lt;/code&gt; section of “INIT INFO”.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;0 1 6&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;0 1 6&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;initInfoShortDescription&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Short-Description&lt;/code&gt; section of “INIT INFO”.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Single-line version of &lt;code&gt;${project.description}&lt;/code&gt; (falling back to &lt;code&gt;${task.baseName}&lt;/code&gt;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;${project.name}&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;initInfoDescription&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;Description&lt;/code&gt; section of “INIT INFO”.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;${project.description}&lt;/code&gt; (falling back to &lt;code&gt;${task.baseName}&lt;/code&gt;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;${project.description}&lt;/code&gt; (falling back to &lt;code&gt;${project.name}&lt;/code&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;initInfoChkconfig&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;chkconfig&lt;/code&gt; section of “INIT INFO”&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;2345 99 01&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;2345 99 01&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;confFolder&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The default value for &lt;code&gt;CONF_FOLDER&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Folder containing the jar&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Folder containing the jar&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;inlinedConfScript&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Reference to a file script that should be inlined in the default launch script. This can be used to set environmental variables such as &lt;code&gt;JAVA_OPTS&lt;/code&gt; before any external config files are loaded&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;logFolder&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Default value for &lt;code&gt;LOG_FOLDER&lt;/code&gt;. Only valid for an &lt;code&gt;init.d&lt;/code&gt; service&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;logFilename&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Default value for &lt;code&gt;LOG_FILENAME&lt;/code&gt;. Only valid for an &lt;code&gt;init.d&lt;/code&gt; service&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;pidFolder&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Default value for &lt;code&gt;PID_FOLDER&lt;/code&gt;. Only valid for an &lt;code&gt;init.d&lt;/code&gt; service&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;pidFilename&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Default value for the name of the PID file in &lt;code&gt;PID_FOLDER&lt;/code&gt;. Only valid for an &lt;code&gt;init.d&lt;/code&gt; service&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;useStartStopDaemon&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Whether the &lt;code&gt;start-stop-daemon&lt;/code&gt; command, when it’s available, should be used to control the process&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;stopWaitTime&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Default value for &lt;code&gt;STOP_WAIT_TIME&lt;/code&gt; in seconds. Only valid for an &lt;code&gt;init.d&lt;/code&gt; service&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;60&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;60&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h6 id=&quot;运行时自定义脚本&quot;&gt;运行时自定义脚本&lt;/h6&gt;

&lt;p&gt;对于 jar 写入后还需要自定义的脚本内容,你可以使用环境变量,或一个 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/deployment.html#deployment-script-customization-conf-file&quot;&gt;config 文件&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;默认脚本支持下来环境变量属性:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;变量&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;MODE&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The “mode” of operation. The default depends on the way the jar was built but is usually &lt;code&gt;auto&lt;/code&gt; (meaning it tries to guess if it is an init script by checking if it is a symlink in a directory called &lt;code&gt;init.d&lt;/code&gt;). You can explicitly set it to &lt;code&gt;service&lt;/code&gt; so that the &lt;code&gt;stop|start|status|restart&lt;/code&gt; commands work or to &lt;code&gt;run&lt;/code&gt; if you want to run the script in the foreground.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;RUN_AS_USER&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The user that will be used to run the application. When not set, the user that owns the jar file will be used.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;USE_START_STOP_DAEMON&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Whether the &lt;code&gt;start-stop-daemon&lt;/code&gt; command, when it’s available, should be used to control the process. Defaults to &lt;code&gt;true&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;PID_FOLDER&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The root name of the pid folder (&lt;code&gt;/var/run&lt;/code&gt; by default).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;LOG_FOLDER&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The name of the folder in which to put log files (&lt;code&gt;/var/log&lt;/code&gt; by default).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;CONF_FOLDER&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The name of the folder from which to read .conf files (same folder as jar-file by default).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;LOG_FILENAME&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The name of the log file in the &lt;code&gt;LOG_FOLDER&lt;/code&gt; (&lt;code&gt;&amp;lt;appname&amp;gt;.log&lt;/code&gt; by default).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;APP_NAME&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The name of the app. If the jar is run from a symlink, the script guesses the app name. If it is not a symlink or you want to explicitly set the app name, this can be useful.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;RUN_ARGS&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The arguments to pass to the program (the Spring Boot app).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;JAVA_HOME&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The location of the &lt;code&gt;java&lt;/code&gt; executable is discovered by using the &lt;code&gt;PATH&lt;/code&gt; by default, but you can set it explicitly if there is an executable file at &lt;code&gt;$JAVA_HOME/bin/java&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;JAVA_OPTS&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Options that are passed to the JVM when it is launched.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;JARFILE&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The explicit location of the jar file, in case the script is being used to launch a jar that it is not actually embedded.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;If not empty, sets the &lt;code&gt;-x&lt;/code&gt; flag on the shell process, allowing you to see the logic in the script.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code&gt;STOP_WAIT_TIME&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The time in seconds to wait when stopping the application before forcing a shutdown (&lt;code&gt;60&lt;/code&gt; by default).&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;❕ 其中 &lt;code&gt;PID_FOLDER&lt;/code&gt;, &lt;code&gt;LOG_FOLDER&lt;/code&gt;, 和&lt;code&gt;LOG_FILENAME&lt;/code&gt; 变量仅适用于 &lt;code&gt;init.d&lt;/code&gt; service. 对于&lt;code&gt;systemd&lt;/code&gt;, 等价的自定义设置通过 ‘service’ script 实现. 详情请查看 &lt;a href=&quot;https://www.freedesktop.org/software/systemd/man/systemd.service.html&quot;&gt;service unit configuration man page&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;除了 &lt;code&gt;JARFILE&lt;/code&gt; 和 &lt;code&gt;APP_NAME&lt;/code&gt; , 上面所列出的设置都可以通过一个 &lt;code&gt;.conf&lt;/code&gt; 文件去配置. 该文件应该与 jar 文件放在一起,并使用相同的文件名,但扩展名为 &lt;code&gt;.conf&lt;/code&gt; 例如, 一个 jar 文件名为 &lt;code&gt;/var/myapp/myapp.jar&lt;/code&gt; 使用的配置文件名称是 &lt;code&gt;/var/myapp/myapp.conf&lt;/code&gt; , 入下面所示:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;myapp.conf&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;JAVA_OPTS=-Xmx1024M
LOG_FOLDER=/custom/log/folder
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;💡  如果你不喜欢将config 文件跟 jar 文件放到一起, 你可以设置一个 &lt;code&gt;CONF_FOLDER&lt;/code&gt; 环境变量以自定义配置文件的位置.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;了解更多对配置文件的安全保护措施, 可参考 &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/deployment.html#deployment-initd-service-securing&quot;&gt;the guidelines for securing an init.d service&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;3microsoft-windows-services&quot;&gt;3.Microsoft Windows Services&lt;/h4&gt;

&lt;p&gt;一个 Spring Boot 应用程序可以通过使用&lt;a href=&quot;https://github.com/kohsuke/winsw&quot;&gt;&lt;code&gt;winsw&lt;/code&gt;&lt;/a&gt;作为 Windows 服务启动&lt;/p&gt;

&lt;p&gt;详情可参考: A (&lt;a href=&quot;https://github.com/snicoll-scratches/spring-boot-daemon&quot;&gt;separately maintained sample&lt;/a&gt;) describes step-by-step how you can create a Windows service for your Spring Boot application.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Apr 2021 15:54:00 +0000</pubDate>
        <link>https://blog.zwt.io/2021/04/06/install-spring-boot-as-linux-service/</link>
        <guid isPermaLink="true">https://blog.zwt.io/2021/04/06/install-spring-boot-as-linux-service/</guid>
        
        <category>Spring Boot</category>
        
        <category>Linux</category>
        
        <category>systemd</category>
        
        <category>init.d</category>
        
        
      </item>
    
      <item>
        <title>基于Grafana的物联网可视化仪表盘</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;本文介绍如何在Ubuntu Server 20.04.2 LTS 服务器设置一个物联网可视化仪表盘。用到的技术包括 Docker, InfluxDB, MQTT, Grafana, Telegraf, NodeRed
硬件方面采用 ESP8266、Arduino 或者其它任何兼容它的。本系统用于监控物联网设备的情况。其中 InfluxBD 用于存储来自传感器的数据。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20210305030358768.png&quot; alt=&quot;image-20210305030358768&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;服务器&quot;&gt;服务器&lt;/h4&gt;

&lt;p&gt;我的服务器用的是旧的台式电脑安装 Ubuntu Server 20.04.2 LTS 操作系统，然后安装 Docker Engine。根据 Docker &lt;a href=&quot;https://docs.docker.com/engine/install/ubuntu/&quot;&gt;官网文档提供的方法 &lt;/a&gt; &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;先安装一些必要的包（如还没有）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo \
  &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; sudo apt-get update
 sudo apt-get install docker-ce docker-ce-cli containerd.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;等 Docker 安装完成后：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo usermod -aG docker $USER
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来是安装其它软件。&lt;/p&gt;

&lt;h5 id=&quot;安装并配置-mosquitto&quot;&gt;安装并配置 Mosquitto&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker pull eclipse-mosquitto
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一款开源的 MQTT broker，然后运行它。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run -it -p 1883:1883 -p 9001:9001 eclipse-mosquitto
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;安装并配置-influxdb&quot;&gt;安装并配置 InfluxDB&lt;/h5&gt;

&lt;p&gt;InfluxBD 是一款时间序列数据库，可以用于存储与时间相关的数据，适合存传感器收集到的数据。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker pull influxdb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行 InfluxDB&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run -d -p 8086:8086 -v influxdb:/var/lib/influxdb --name influxdb influxdb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里是将influxdb作为守护进程启动，并创建了卷用于存储数据在 &lt;code&gt;/var/lib/influxdb&lt;/code&gt;&lt;/p&gt;

&lt;h6 id=&quot;如何创建-influxdb-数据库和用户&quot;&gt;如何创建 InfluxDB 数据库和用户&lt;/h6&gt;

&lt;p&gt;这里需要创建数据库和用户，后面 Telegraf 需要访问数据库，以存储来自 MQTT 的数据。&lt;/p&gt;

&lt;p&gt;首先打开 InfluxDB CLI：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker exec -it influxdb influx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来创建数据库和用户：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;create database sensors

create user &quot;telegraf&quot; with password &quot;telegraf&quot;

grant all on sensors to telegraf
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Fri, 05 Mar 2021 02:45:00 +0000</pubDate>
        <link>https://blog.zwt.io/2021/03/05/grafana-iot-visualization-dashboard/</link>
        <guid isPermaLink="true">https://blog.zwt.io/2021/03/05/grafana-iot-visualization-dashboard/</guid>
        
        <category>IoT</category>
        
        <category>可视化</category>
        
        <category>物联网</category>
        
        <category>传感器</category>
        
        
      </item>
    
      <item>
        <title>剑指Offer 面试题 3</title>
        <description>&lt;h4 id=&quot;题目&quot;&gt;题目&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;在一个长度为n的数组里的所有数字都在 0 到 n-1 的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中第一个重复的数字。 例如，如果输入长度为7的数组{2 ,3, 1, 0, 2, 5, 3}，那么对应的输出是第一个重复的数字 2。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个题目在牛客网是&lt;strong&gt;请找出数组中第一个重复的数字&lt;/strong&gt;，书中是“请找出数组中&lt;strong&gt;任意一个&lt;/strong&gt;重复的数字”。如果直接按照书中的代码，那就不能通过牛客网的全部测试用例，这就有点搞了。不过还是先讲一下解题思路吧。&lt;/p&gt;

&lt;h5 id=&quot;先排序再扫描&quot;&gt;先排序，再扫描&lt;/h5&gt;

&lt;p&gt;排序后的数组很容易可以找出重复数字，从头到尾扫描一遍，发现相邻两个数相等的情况即找到了重复数字。时间复杂度为 $O(nlogn)$&lt;/p&gt;

&lt;h5 id=&quot;利用哈希表&quot;&gt;利用哈希表&lt;/h5&gt;

&lt;p&gt;从头到尾扫描一遍数组，如果哈希表中没有这个数字，就将它加入哈希表，如果该数字已存在，则找到了重复数字。这个方法可以用 $O(1)$ 的时间来判断哈希表是否包含当前扫描到的数字，整个算法的时间复杂度是 $O(n)$ ，但代价是需要一个 $O(n)$ 大小的哈希表。&lt;/p&gt;

&lt;h5 id=&quot;利用数组下标&quot;&gt;利用数组下标&lt;/h5&gt;

&lt;p&gt;因为数组中所有数字都在0~n-1范围内，如果数组没有重复数字，那么数组排序后里面数字应该与它对应的下标相等。但因为数组中数字有重复，所以某个位置上的数字应该会出现多于一次。其实说的是，某个下标对应着的与下标相等的数字可能出现多次。原书中那句话是，“由于数组中有重复的数字，有些位置可能存在多个数字，同时有些位置可能没有数字。”，当时看到这句话有点懵，难道数组的一个位置还可以挤下两个数字？后来知道他所指的“位置”是指，下标值与数值相等的这种情况。说起位置，就有点想起 &lt;code&gt;PositionalList&lt;/code&gt; …&lt;/p&gt;

&lt;p&gt;清楚了上面的情况，那么怎么可以找出重复数字？书中也是一段文字描述，按照里边描述的确可以找出重复数字，但看起来有点不直观，所以画个流程图看看。&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20201207035713049.png&quot; alt=&quot;image-20201207035713049&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这实际上是一个 &lt;strong&gt;in-place&lt;/strong&gt; 的排序操作，一边排序同时判断是否有重复数字。上图中 &lt;em&gt;i&lt;/em&gt; 表示数组的下标值，&lt;em&gt;m&lt;/em&gt; 表示数字值。我们开始从头到尾依次扫描这个数组，当扫描到下标为 &lt;em&gt;i&lt;/em&gt; 的数字时，首先比较这个数字(&lt;em&gt;m&lt;/em&gt;)是否等于 &lt;em&gt;i&lt;/em&gt;。如果是，就扫描下一个数字；如果不等，则将该数字与第 &lt;em&gt;m&lt;/em&gt; 个数字进行比较（即与下标值等于 &lt;em&gt;m&lt;/em&gt; 的那个数比较）。此时，如果它和第 &lt;em&gt;m&lt;/em&gt; 个数字相等，则找到了一个重复数字，因为这个数字在下标值为 &lt;em&gt;i&lt;/em&gt; 和 &lt;em&gt;m&lt;/em&gt; 的位置都出现了。如果它和第 &lt;em&gt;m&lt;/em&gt; 个数字不相等，就将第 &lt;em&gt;i&lt;/em&gt; 个数字和第 &lt;em&gt;m&lt;/em&gt; 个数字交换，这个操作就是将 &lt;em&gt;m&lt;/em&gt; 放到下标值等于其数值的位置，放在它该出现的位置上。这个过程其实就是一个插入排序（Insertion Sort），利用了数组下标有序，in-place 操作做到空间复杂度为 $O(1)$ ，每个数字最多只要交换两次就可以找到它自己的位置，因此总的时间复杂度是 $O(n)$，代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;/**
 * @param numbers     输入的数组
 * @param length      数组的长度
 * @param duplication 原书中的是 C/C++ 的一个指针，用于返回数组中重复的数字，
                      在这里可能只是为了统一，将重复数字存在数组第一个位置
 * @return            true 如果有重复，否则 false
 */
public boolean duplicate(int numbers[], int length, int[] duplication) {
    // 判空
    if (numbers == null || length &amp;lt;= 0) {
        return false;
    }

    // 判断是否数组内数字是否符合题目要求范围
    for (int i = 0; i &amp;lt; length; i++) {
        if (numbers[i] &amp;lt; 0 || numbers[i] &amp;gt; length - 1) {
            return false;
        }
    }

    for (int i = 0; i &amp;lt; length; i++) {
        while(numbers[i] != i) {  // 原题是找到任意一个重复数字，但这样做不符合牛客网的要求
        // if (numbers[i] != i) {  // 改为 if 可以通过牛客网题目测试，但题解不正确，因为测试用例有问题，奇怪。
            if (numbers[i] == numbers[numbers[i]]) {
                duplication[0] = numbers[i];
                return true;
            }

            // swap numbers[i] and numbers[numbers[i]]
            int temp = numbers[i];
            numbers[i] = numbers[temp];
            numbers[temp] = temp;
        }
    }
    return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以通过测试的一种解法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public boolean duplicate(int[] numbers, int length, int[] duplication) {

    if (numbers == null || length &amp;lt;= 0) {
        return false;
    }

    Set&amp;lt;Integer&amp;gt; values = new HashSet&amp;lt;&amp;gt;();
    for (int i = 0; i &amp;lt; length; i++) {
        if (numbers[i] &amp;lt; 0 || numbers[i] &amp;gt; length - 1) {
            return false;
        }
    }

    int[] cloned = Arrays.copyOf(numbers, numbers.length);

    for (int i = 0; i &amp;lt; length; i++) {
        while (numbers[i] != i) {  //原题是找到任意一个重复数字
            if (numbers[i] == numbers[numbers[i]]) {
                //duplication[0] = numbers[i];
                values.add(numbers[i]);
                break;
            }

            // swap numbers[i] and numbers[numbers[i]]
            int temp = numbers[i];
            numbers[i] = numbers[temp];
            numbers[temp] = temp;
        }
    }

    if (!values.isEmpty()) {
        for (int i : cloned) {
            if (values.contains(i)) {
                duplication[0] = i;
                break;
            }
        }
    }

    return !values.isEmpty();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;改成这样还不如下面这种方法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;// 使用临时数组
public boolean duplicate(int numbers[], int length, int[] duplication) {
    if (numbers == null || numbers.length == 0)
        return false;
    int[] temp = new int[length];
    for (int i = 0; i &amp;lt; length; i++) {
        temp[numbers[i]]++;
        if (temp[numbers[i]] &amp;gt; 1) {
            duplication[0] = numbers[i];
            return true;
        }
    }
    return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面这个方法参考自：&lt;a href=&quot;https://blog.nowcoder.net/n/1fe32887be5c453aae05429990659f52&quot;&gt;牛客网的一个解题&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;结束了&quot;&gt;结束了&lt;/h5&gt;

&lt;p&gt;这个题是剑指 Offer 开局的第一题，有点经典，除了上面主要着重分析的方法，还有其它各种解法，但传统解题以点到为止。时间不太够，要继续刷其它题了。&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Dec 2020 03:03:00 +0000</pubDate>
        <link>https://blog.zwt.io/2020/12/07/find-duplicate-number-in-array/</link>
        <guid isPermaLink="true">https://blog.zwt.io/2020/12/07/find-duplicate-number-in-array/</guid>
        
        <category>Java</category>
        
        <category>面试</category>
        
        
      </item>
    
      <item>
        <title>剑指Offer 面试题 34</title>
        <description>&lt;h4 id=&quot;题目&quot;&gt;题目&lt;/h4&gt;

&lt;p&gt;书中原题目是：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;题目：输入一棵二叉树和一个整数，打印出二叉树中节点值的和为输入整数的所有路径。从树的根节点开始往下一直到叶节点所经过的节点形成一条路径。二叉树节点的定义如下：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;struct BinaryTreeNode
{
  int               m_nValue;
  BinaryTreeNode    m_pLeft;
  BinaryTreeNode    m_pRight;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过牛客网上的题目，稍微有点不同：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;输入一颗二叉树的根节点和一个整数，按字典序打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;题目是要求返回 &lt;code&gt;ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt;&lt;/code&gt;，还有那个按字典序打印。&lt;/p&gt;

&lt;p&gt;这道题主要是对树进行前序遍历，访问到某个节点时累加起来，直到叶子节点，判断路径节点值之和是否为要求的整数。思路相对来说比较简单和直接，但是需要注意实现采用的数据结构的细节。&lt;br /&gt;
首先，从一个具体例如入手分析，输入下图 1 中二叉树和整数 22  &lt;!--more--&gt;
&lt;img src=&quot;/img/binary-tree.png&quot; alt=&quot;二叉树&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从根节点 10 开始按前序遍历，下一个节点是 5，此时路径包含两个节点，分别是 10，5。接下来将访问到 4 这个节点，这时候已经达到叶子节点，但路径上的节点值之和是 19，不等于 22，所以不符合要求。之后回溯到父子点 5，接着再去访问右节点 7，此时路径中的节点的值 10，5，7之和刚好是 22，符合要求。&lt;br /&gt;
其中的规律是，当用前序遍历的方式访问到某一节点时，我们把该节点添加到路径上，并累加该节点的值。如果该节点为叶节点，并且路径中节点值的和刚好等于输入的整数，则当前路径符合要求，我们把它添加到&lt;code&gt;ArrayList&lt;/code&gt;里边。如果当前节点不是叶节点，则继续访问它的子节点。当前节点访问结束后，递归方法将自动回到它的父节点。因此，我们在方法退回之前在路径上删除当前节点并减去当前节点的值，以确保返回父节点时路径刚好是从根节点到父节点。可以看出保存路径的数据结构实际上是一个栈，因为路径要与递归调用状态一致，而递归调用的本质就是一个压栈和出栈的过程。这里的内容基本跟书里的讲解差不多，只不过按牛客网的题目要求，并且用 Java 实现的话，我自己的做法是使用了集合框架里的 &lt;code&gt;Deque&lt;/code&gt; 接口，一个双端队列。因为这样子，可以保证队列的顺序符合最终要求返回的路径内节点的顺序，同时也可以当作一个栈在队尾（相当于栈顶）操作。具体代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package io.zwt.ch4;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;

/**
 * 输入一颗二叉树的根节点和一个整数，
 * 按字典序打印出二叉树中结点值的和为输入整数的所有路径。
 * 路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。
 */
public class FindPathSum {

    private final ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt; lists;

    public FindPathSum() {
        this.lists = new ArrayList&amp;lt;&amp;gt;();
    }

    public static class TreeNode {
        int val = 0;
        TreeNode left = null;
        TreeNode right = null;

        public TreeNode(int val) {
            this.val = val;
        }
    }

    /**
     * @param root   输入的二叉树的根节点
     * @param target 预期路径节点值之和
     * @return 路径组成的 List
     */
    public ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt; FindPath(TreeNode root, int target) {
        if (root == null) {
            return new ArrayList&amp;lt;&amp;gt;();
        }
        Deque&amp;lt;Integer&amp;gt; path = new ArrayDeque&amp;lt;&amp;gt;();  // 一个双端队列存储路径
        int currentSum = 0;
        return findPath(root, target, path, currentSum);
    }

    /**
     * @param root       当前节点
     * @param target     路径节点值之和
     * @param path       路径
     * @param currentSum 当前路径值之和
     * @return 返回多少路径
     */
    private ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt; findPath(TreeNode root, int target, Deque&amp;lt;Integer&amp;gt; path, int currentSum) {

        currentSum += root.val;
        path.offer(root.val);  // 放入队列

        // 如果是叶节点，并且路径上节点值的和等于输入的值，
        // 则将这条路径添加到 ArrayList
        boolean isLeaf = root.left == null &amp;amp;&amp;amp; root.right == null;  // 递归结束条件
        if (currentSum == target &amp;amp;&amp;amp; isLeaf) {
            lists.add(new ArrayList&amp;lt;&amp;gt;(path));
        }

        // 如果不是叶节点，则遍历它的子节点
        if (root.left != null) {
            findPath(root.left, target, path, currentSum);
        }
        if (root.right != null) {
            findPath(root.right, target, path, currentSum);
        }

        // 在返回父节点之前，在路径上删除当前节点
        path.pollLast();
        return lists;

    }
}

&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Thu, 03 Dec 2020 21:40:00 +0000</pubDate>
        <link>https://blog.zwt.io/2020/12/03/binary-path-sum/</link>
        <guid isPermaLink="true">https://blog.zwt.io/2020/12/03/binary-path-sum/</guid>
        
        <category>Java</category>
        
        <category>面试</category>
        
        
      </item>
    
      <item>
        <title>水塔液位自动控制装置</title>
        <description>&lt;p&gt;前段时间做了点小东西，随缘记录一下。&lt;br /&gt;
在家里日常生活用水是用水塔，通过水泵将水从水井抽到楼顶的水塔用的。通常这些水塔都会有自动液位控制的，一般是一个浮球，机械式的开关。但家里的水塔比较旧没有安装水位控制装置，所以我一直想在水塔添加这样的功能。因为不想用浮球式液位控制，主要是想趁机折腾一下，玩一下技术。最初有些不太实际的脑洞，例如，可不可以通过测量液位变化时水塔的电容反映水位变化；还有根据水压变化计算出液面高度……  因为不想安装水压测量到水管里，而且还要设法与水泵开关联动，麻烦。大概五年前，上大二的时候，刚学单片机，就想着用 51 做一个东西去根据水塔液位变化自动控制水泵开关。  &lt;!--more--&gt;
&lt;img src=&quot;/img/image-20210305032735210.png&quot; alt=&quot;image-20210305032735210&quot; /&gt;
大概就是这么一个东西，当初用 51 接一个超声波测距模块，还有继电器，联合起来控制水泵。测得距离大于某个值，说明水位低于某个值，就打开水泵抽水，直到距离小于某个值就关掉水泵停止抽水，逻辑很简单的。&lt;br /&gt;
不过当时程序可能写得不太好，硬件也没有弄得很好，因为用洞洞板焊接的。那东西在一次暴雨天后就坏了，我弟以为那是遭雷击了，我也不太清楚，反正就坏了。 然后半个月前，我闲着又再次折腾起这东西。这次硬件上使用 Arduino + ESP8266 + 小米路由器 + 小米智能网关 + 加个小米 ZigBee 版智能插座。超声波测距模块由Arduino 驱动，再通过串口发送距离数据到 ESP8266，通过 WiFi TCP 传到小米路由器（跑 OpenWRT)，在小米路由器上的 Linux 写了个程序，基于 ubox (epoll) 的 TCP 和 UDP 客户端。其中 TCP 接收来自 ESP8266 的液位数据，UDP 客户端用于与小米智能网关交互。当水塔液位低于某个水平，这个程序就会向小米智能网关发送命令，去控制米家智能插座打开。这个插座接着水泵，就相当于初版里边的继电器。&lt;br /&gt;
之前还弄了个可视化监控的东西，但是后来 PC 机做的服务器崩了，就没有继续玩下去。本来还有个基于 JavaFX 的图形界面，可以查看液位，手动控制开关之类的。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;更新了。上周换了一个防水的超声波模块，因为考虑到我不在老家的时候，如果用那种普通的 HC-SR04，不防水，一两个月就坏，没有空维修就麻烦。所以换了一个防水的，贵很多，但估计会比较耐用、稳定。录了个视频大概聊了一下: &lt;a href=&quot;https://www.bilibili.com/video/BV1b5411N7UX&quot;&gt;BV1b5411N7UX&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;然后关于可视化监控的，见另外一篇文章的介绍 &lt;a href=&quot;/2021/03/05/grafana-iot-visualization-dashboard/&quot;&gt;基于Grafana的物联网可视化仪表盘&lt;/a&gt; 。&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Nov 2020 12:13:00 +0000</pubDate>
        <link>https://blog.zwt.io/2020/11/23/water-tank-level-control-automation/</link>
        <guid isPermaLink="true">https://blog.zwt.io/2020/11/23/water-tank-level-control-automation/</guid>
        
        <category>Personal</category>
        
        <category>Draft</category>
        
        <category>Notes</category>
        
        
      </item>
    
      <item>
        <title>Spring单例与单例模式</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Spring 单例不是 Java 单例。本文讨论 Spring 的单例与单例模式的区别。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;单例是 Spring 当中 bean 的默认范围(Scope)。Spring 容器会为某个 bean 定义对象创建唯一的实例，很多时候我们会将这种设计跟《设计模式》(GoF) 书中定义的单例模式作比较。&lt;/p&gt;

&lt;h3 id=&quot;1-单例范围-vs-单例模式&quot;&gt;1. 单例范围 vs 单例模式&lt;/h3&gt;

&lt;p&gt;Spring 当中的单例范围跟单例模式不是同一个东西。其中的两点差异如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;单例模式确保某个类加载器的某个类只有一个实例&lt;/li&gt;
  &lt;li&gt;而 Spring 单例范围是每个容器的每个bean  &lt;!--more--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;11-单例范围的例子&quot;&gt;1.1 单例范围的例子&lt;/h4&gt;

&lt;p&gt;Spring 的单例实例会被放在缓存中，下次再访问那个命名的 bean 的时候就会从缓存里面取。下边看看例子。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class Account {

    private String name;

    public Account() {
    }

    public Account(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return &quot;Account{&quot; +
                &quot;name='&quot; + name + '\'' +
                '}';
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Spring Boot 的 main 方法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@SpringBootApplication
@SpringBootApplication
public class SpringSingletonApp {

    public static void main(String[] args) {
        SpringApplication.run(SpringSingletonApp.class, args);
    }

    @Bean(name = &quot;bean1&quot;)
    public Account account() {
        return new Account(&quot;Test User 1&quot;);
    }

    @Bean(name = &quot;bean2&quot;)
    public Account account1() {
        return new Account(&quot;Test User 2&quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;理解上面的代码：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;我们创建了同一个类的 2 个实例，并有不同的 bean id。那么上面代码中 Spring 的 IoC 容器创建了多少个实例？&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;2 个不同的实例，在容器中分别绑定到它们的 id？&lt;/li&gt;
  &lt;li&gt;还是 1 个实例绑定到 2 个 bean id？&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;12-测试用例&quot;&gt;1.2 测试用例&lt;/h4&gt;

&lt;p&gt;我们使用单元测试找出答案。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@SpringBootTest
class SpringSingletonAppTests {

    private static final Logger log = LoggerFactory.getLogger(SpringSingletonAppTests.class);

    @Resource(name = &quot;bean1&quot;)
    Account account1;

    @Resource(name = &quot;bean1&quot;)
    Account duplicateAccount;

    @Resource(name = &quot;bean2&quot;)
    Account account2;

    @Test
    public void testSingletonScope() {
        log.info(account1.getName());
        log.info(account2.getName());

        log.info(&quot;Accounts are equal -&amp;gt; {}&quot;, account1 == account2);
        log.info(&quot;Duplicate account  -&amp;gt; {}&quot;, account1 == duplicateAccount);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;20:06:31.165 [main] INFO  i.z.s.SpringSingletonAppTests - Test User 1
20:06:31.165 [main] INFO  i.z.s.SpringSingletonAppTests - Test User 2
20:06:31.165 [main] INFO  i.z.s.SpringSingletonAppTests - Accounts are equal -&amp;gt; false
20:06:31.167 [main] INFO  i.z.s.SpringSingletonAppTests - Duplicate account  -&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从上面的输出我们发现：
Spring 返回了两个不同的实例，单例范围的同一个类可以有多于一个的对象实例。&lt;/p&gt;

&lt;p&gt;对于某个 bean id，Spring 容器仅维护唯一的共享单例 bean，在我们上面的例子中，Spring IoC 容器基于同一个类的 bean 定义创建了两个实例，并将它们绑定到对应的 id。
Spring 的 bean 定义就像键值对那样，bean id 就是 key，bean 的实例就是 value。每个 key 引用都会返回同一个 bean 实例（例如 bean1 引用始终返回 id 为 bean1 的 bean）&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;Spring 单例跟传统的单例模式是不同的。Spring 确保在每个容器对给定 bean id 定义只创建一个 bean 实例。 传统单例模式是保证给定一个类加载器所加载的某个类只有唯一的一个实例。&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Nov 2020 02:04:00 +0000</pubDate>
        <link>https://blog.zwt.io/2020/11/02/Spring-singleton-vs-Singleton-pattern/</link>
        <guid isPermaLink="true">https://blog.zwt.io/2020/11/02/Spring-singleton-vs-Singleton-pattern/</guid>
        
        <category>Personal</category>
        
        <category>Notes</category>
        
        
      </item>
    
      <item>
        <title>DS-ch15 Memory Management and B-Trees</title>
        <description>&lt;h1 id=&quot;155-exercises&quot;&gt;15.5 Exercises&lt;/h1&gt;

&lt;h3 id=&quot;reinforcement&quot;&gt;Reinforcement&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;R-15.1&lt;/strong&gt; Julia just bought a new computer that uses 64-bit integers to address memory cells. Argue why Julia will never in her life be able to upgrade the main memory of her computer so that it is the maximum-size possible, assuming that you have to have distinct atoms to represent different bits.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;R-15.2&lt;/strong&gt; Consider an initially empty memory cache consisting of four pages. How many page misses does the LRU algorithm incur on the following page request sequence: (2,3,4,1,2,5,1,3,5,4,1,2,3)?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;R-15.3&lt;/strong&gt; Consider an initially empty memory cache consisting of four pages. How many page misses does the FIFO algorithm incur on the following page request sequence: (2,3,4,1,2,5,1,3,5,4,1,2,3)?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;R-15.4&lt;/strong&gt; Consider an initially empty memory cache consisting of four pages. What is the maximum number of page misses that the random algorithm incurs on the following page request sequence: (2,3,4,1,2,5,1,3,5,4,1,2,3)? Show all of the random choices the algorithm made in this case.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;R-15.5&lt;/strong&gt; Describe, in detail, algorithms for adding an item to, or deleting an item from, an $(a,b)$ tree.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;R-15.6&lt;/strong&gt; Suppose &lt;em&gt;T&lt;/em&gt; is a multiway tree in which each internal node has at least five and at most eight children. For what values of &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; is $T$ a valid $(a,b)$ tree?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;R-15.7&lt;/strong&gt; For what values of d is the tree $T$ of the previous exercise an order-&lt;em&gt;d&lt;/em&gt; B-tree?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;R-15.8&lt;/strong&gt; Draw the result of inserting, into an initially empty order-7 B-tree, entries with keys (4,40,23,50,11,34,62,78,66,22,90,59,25,72,64,77,39,12), in this order.  &lt;!--more--&gt;&lt;/p&gt;

&lt;h3 id=&quot;creativity&quot;&gt;Creativity&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;C-15.9&lt;/strong&gt; Describe an efficient external-memory algorithm for removing all the duplicate entries in an array list of size &lt;em&gt;n&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-15.10&lt;/strong&gt; Describe an external-memory data structure to implement the stack ADT so that the total number of disk transfers needed to process a sequence of &lt;em&gt;k&lt;/em&gt; push and pop operations is $O(k/B)$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-15.11&lt;/strong&gt; Describe an external-memory data structure to implement the queue ADT so that the total number of disk transfers needed to process a sequence of &lt;em&gt;k&lt;/em&gt; enqueue and dequeue operations is $O(k/B)$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-15.12&lt;/strong&gt; Describe an external-memory version of the &lt;code&gt;PositionalList&lt;/code&gt; ADT (Section 7.3), with block size &lt;em&gt;B&lt;/em&gt;, such that an iteration of a list of length n is completed using $O(n/B)$ transfers in the worst case, and all other methods of the ADT require only $O(1)$ transfers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-15.13&lt;/strong&gt; Change the rules that define red-black trees so that each red-black tree &lt;em&gt;T&lt;/em&gt; has a corresponding $(4,8)$ tree, and vice versa.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-15.14&lt;/strong&gt; Describe a modified version of the B-tree insertion algorithm so that each time we create an overflow because of a split of a node &lt;em&gt;w&lt;/em&gt;, we redistribute keys among all of &lt;em&gt;w&lt;/em&gt;’s siblings, so that each sibling holds roughly the same number of keys (possibly cascading the split up to the parent of &lt;em&gt;w&lt;/em&gt;). What is the minimum fraction of each block that will always be filled using this scheme?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-15.15&lt;/strong&gt; Another possible external-memory map implementation is to use a skip list, but to collect consecutive groups of $O(B)$ nodes, in individual blocks, on any level in the skip list. In particular, we define an &lt;strong&gt;&lt;em&gt;order-d B-skip list&lt;/em&gt;&lt;/strong&gt; to be such a representation
of a skip list structure, where each block contains at least $⌈d/2⌉$ list nodes and at most &lt;em&gt;d&lt;/em&gt; list nodes. Let us also choose &lt;em&gt;d&lt;/em&gt; in this case to be the maximum number of list nodes from a level of a skip list that can fit into one block. Describe how we should modify the skip-list insertion and removal algorithms for a &lt;em&gt;B&lt;/em&gt;-skip list so that the expected height of the structure is $O(logn/logB)$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-15.16&lt;/strong&gt; Describe how to use a B-tree to implement the Partition ADT (Section 14.7.3) so that the union and find operations each use at most $O(logn/logB)$ disk transfers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-15.17&lt;/strong&gt; Suppose we are given a sequence &lt;em&gt;S&lt;/em&gt; of &lt;em&gt;n&lt;/em&gt; elements with integer keys such that some elements in &lt;em&gt;S&lt;/em&gt; are colored “blue” and some elements in &lt;em&gt;S&lt;/em&gt; are colored “red.” In addition, say that a red element &lt;em&gt;e&lt;/em&gt; &lt;strong&gt;&lt;em&gt;pairs&lt;/em&gt;&lt;/strong&gt; with a blue element &lt;em&gt;f&lt;/em&gt; if they have the same key value. Describe an efficient external-memory algorithm for finding all the red-blue pairs in &lt;em&gt;S&lt;/em&gt;. How many disk transfers does your algorithm perform?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-15.18&lt;/strong&gt; Consider the page caching problem where the memory cache can hold &lt;em&gt;m&lt;/em&gt; pages, and we are given a sequence &lt;em&gt;P&lt;/em&gt; of &lt;em&gt;n&lt;/em&gt; requests taken from a pool of $m + 1$ possible pages. Describe the optimal strategy for the offline algorithm and show that it
causes at most $m + n/m$ page misses in total, starting from an empty cache.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-15.19&lt;/strong&gt; Describe an efficient external-memory algorithm that determines whether an array of &lt;em&gt;n&lt;/em&gt; integers contains a value occurring more than &lt;em&gt;n/2&lt;/em&gt; times.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-15.20&lt;/strong&gt; Consider the page caching strategy based on the &lt;strong&gt;&lt;em&gt;least frequently used&lt;/em&gt;&lt;/strong&gt; (LFU) rule, where the page in the cache that has been accessed the least often is the one that is evicted when a new page is requested. If there are ties, LFU evicts the least frequently used page that has been in the cache the longest. Show that there is a sequence P of n requests that causes LFU to miss $Ω(n)$ times for a cache of m pages, whereas the optimal algorithm will miss only $O(m)$ times.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-15.21&lt;/strong&gt; Suppose that instead of having the node-search function $f (d) = 1$ in an order-&lt;em&gt;d&lt;/em&gt; B-tree &lt;em&gt;T&lt;/em&gt; , we have $f (d) = logd$. What does the asymptotic running time of performing a search in &lt;em&gt;T&lt;/em&gt; now become?&lt;/p&gt;

&lt;h3 id=&quot;projects&quot;&gt;Projects&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;P-15.22&lt;/strong&gt; Write a Java class that simulates the best-fit, worst-fit, first-fit, and next-fit algorithms for memory management. Determine experimentally which method is the best under various sequences of memory requests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P-15.23&lt;/strong&gt; Write a Java class that implements all the methods of the sorted map ADT by means of an $(a,b)$ tree, where &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; are integer constants passed as parameters to a constructor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P-15.24&lt;/strong&gt; Implement the B-tree data structure, assuming a block size of 1024 and integer keys. Test the number of “disk transfers” needed to process a sequence of map operations.&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Aug 2020 02:36:00 +0000</pubDate>
        <link>https://blog.zwt.io/2020/08/16/ds-ch15/</link>
        <guid isPermaLink="true">https://blog.zwt.io/2020/08/16/ds-ch15/</guid>
        
        <category>Data Structure</category>
        
        
      </item>
    
      <item>
        <title>DS-ch01</title>
        <description>&lt;h1 id=&quot;110-exercises&quot;&gt;1.10 Exercises&lt;/h1&gt;

&lt;h3 id=&quot;reinforcement&quot;&gt;Reinforcement&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;R-1.1&lt;/strong&gt; Write a short Java method, &lt;code&gt;inputAllBaseTypes&lt;/code&gt;, that inputs a different value of each base type from the standard 
input device and prints it back to the standard output device.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;R-1.2&lt;/strong&gt; Suppose that we create an array &lt;code&gt;A&lt;/code&gt; of &lt;code&gt;GameEntry&lt;/code&gt; objects, which has an integer &lt;code&gt;scores&lt;/code&gt; field, and we clone &lt;code&gt;A&lt;/code&gt; and 
store the result in an array &lt;code&gt;B&lt;/code&gt;. If we then immediately set &lt;code&gt;A[4].scores&lt;/code&gt; equal to 550, what is the score value of the 
&lt;code&gt;GameEntry&lt;/code&gt; object referenced by &lt;code&gt;B[4]&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;R-1.3&lt;/strong&gt; Write a short Java method, &lt;code&gt;isMultiple&lt;/code&gt;, that takes two &lt;code&gt;long&lt;/code&gt; values, &lt;em&gt;n&lt;/em&gt; and &lt;em&gt;m&lt;/em&gt;, and returns true if and only if &lt;em&gt;n&lt;/em&gt; is a multiple of &lt;em&gt;m&lt;/em&gt;, that is, $n = mi$ for some integer &lt;em&gt;i&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;R-1.4&lt;/strong&gt; Write a short Java method, &lt;code&gt;isEven&lt;/code&gt;, that takes an int i and returns true if and only if i is even. Your method cannot use the multiplication, modulus, or division operators, however.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;R-1.5&lt;/strong&gt; Write a short Java method that takes an integer n and returns the sum of all positive integers less than or equal to n.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;R-1.6&lt;/strong&gt; Write a short Java method that takes an integer n and returns the sum of  all the odd positive integers less than or equal to n.&lt;br /&gt;
&lt;strong&gt;R-1.7&lt;/strong&gt; Write a short Java method that takes an integer n and returns the sum of the squares of all positive integers less than or equal to n.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;R-1.8&lt;/strong&gt; Write a short Java method that counts the number of vowel in a given character string.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;R-1.9&lt;/strong&gt; Write a short Java method that uses a &lt;code&gt;StringBuilder&lt;/code&gt; instance to remove all the punctuation from a string s storing a sentence, for example, transforming the string “Let’s try, Mike!” to “Lets try Mike”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;R-1.10&lt;/strong&gt; Write a Java class, Flower, that has three instance variables of type &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, and &lt;code&gt;float&lt;/code&gt;, which respectively represent the name of the flower, its number of petals, and price. Your class must include a constructor method that initializes each variable to an appropriate value, and your class should include methods for setting the value of each type, and getting the value of each type.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;R-1.11&lt;/strong&gt; Modify the &lt;code&gt;CreditCard&lt;/code&gt; class from Code Fragment 1.5 to include a method that updates the credit limit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;R-1.12&lt;/strong&gt; Modify the &lt;code&gt;CreditCard&lt;/code&gt; class from Code Fragment 1.5 so that it ignores any request to process a negative payment amount.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;R-1.13&lt;/strong&gt; Modify the declaration of the first for loop in the main method in Code Fragment 1.6 so that its charges will cause exactly one of the three credit cards to attempt to go over its credit limit. Which credit card is it?  &lt;!--more--&gt;&lt;/p&gt;

&lt;h3 id=&quot;creativity&quot;&gt;Creativity&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;C-1.14&lt;/strong&gt; Write a pseudocode description of a method that reverses an array of n integers, so that the numbers are listed in the opposite order than they were before, and compare this method to an equivalent Java method for doing the same thing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-1.15&lt;/strong&gt; Write a pseudocode description of a method for finding the smallest and largest numbers in an array of integers and compare that to a Java method that would do the same thing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-1.16&lt;/strong&gt; Write a short program that takes as input three integers, a, b, and c, from the Java console and determines if they can be used in a correct arithmetic formula (in the given order), like “a+b = c,” “a = b - c,” or “a ∗ b = c.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-1.17&lt;/strong&gt; Write a short Java method that takes an array of int values and determines if there is a pair of distinct elements of the array whose product is even.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-1.18&lt;/strong&gt; The p-norm of a vector v = (v1,v2,…,vn) in n-dimensional space is defined as kvk = qp v1p +v2p +···+vnp. For the special case of p = 2, this results in the traditional Euclidean norm, which represents the length of the vector. For example, the Euclidean norm of a two-dimensional vector with coordinates (4,3) has a Euclidean norm of √42 +32 = √16+9 = √25 = 5. Give an implementation of a method named norm such that norm(v, p) returns the p-norm value of v and norm(v) returns the Euclidean norm of v, where v is represented as an array of coordinates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-1.19&lt;/strong&gt; Write a Java program that can take a positive integer greater than 2 as input and write out the number of times one must repeatedly divide this number by 2 before getting a value less than 2.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-1.20&lt;/strong&gt; Write a Java method that takes an array of float values and determines if all the numbers are different from each other (that is, they are distinct).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-1.21&lt;/strong&gt; Write a Java method that takes an array containing the set of all integers in the range 1 to 52 and shuffles it into random order. Your method should output each possible order with equal probability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-1.22&lt;/strong&gt; Write a short Java program that outputs all possible strings formed by using the characters ‘c’, ‘a’, ‘t’, ‘d’, ‘o’, and ‘g’ exactly once.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-1.23&lt;/strong&gt; Write a short Java program that takes two arrays a and b of length n storing int values, and returns the dot product of a and b. That is, it returns an array c of length n such that c[i] = a[i]· b[i], for i = 0,…,n - 1.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-1.24&lt;/strong&gt; Modify the &lt;code&gt;CreditCard&lt;/code&gt; class from Code Fragment 1.5 so that printSummary becomes a nonstatic method, and modify the main method from Code Fragment 1.6 accordingly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C-1.25&lt;/strong&gt; Modify the &lt;code&gt;CreditCard&lt;/code&gt; class to add a toString() method that returns a String representation of the card (rather than printing it to the console, as done by printSummary). Modify the main method from Code Fragment 1.6 accordingly to use the standard println command.&lt;/p&gt;

&lt;h3 id=&quot;projects&quot;&gt;Projects&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;P-1.26&lt;/strong&gt; Write a short Java program that takes all the lines input to standard input and writes them to standard output in reverse order. That is, each line is output in the correct order, but the ordering of the lines is reversed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P-1.27&lt;/strong&gt; Write a Java program that can simulate a simple calculator, using the Java console as the exclusive input and output device. That is, each input to the calculator, be it a number, like 12.34 or 1034, or an operator, like + or =, can be done on a
separate line. After each such input, you should output to the Java console what would be displayed on your calculator.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P-1.28&lt;/strong&gt; A common punishment for school children is to write out a sentence multiple times. Write a Java stand-alone program that will write out the following sentence one hundred times: “I will never spam my friends again.” Your program should number each of the sentences and it should make eight different random looking typos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P-1.29&lt;/strong&gt; The birthday paradox says that the probability that two people in a room will have the same birthday is more than half, provided n, the number of people in the room, is more than 23. This property is not really a paradox, but many people find it surprising. Design a Java program that can test this paradox by a series of experiments on randomly generated birthdays, which test this paradox for n = 5,10,15,20,…,100.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P-1.30&lt;/strong&gt; (For those who know Java graphical user interface methods:) Define a &lt;code&gt;GraphicalTest&lt;/code&gt; class that tests the functionality of the &lt;code&gt;CreditCard&lt;/code&gt; class from Code Fragment 1.5 using text fields and buttons.&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Aug 2020 00:00:00 +0000</pubDate>
        <link>https://blog.zwt.io/2020/08/15/ds-ch01/</link>
        <guid isPermaLink="true">https://blog.zwt.io/2020/08/15/ds-ch01/</guid>
        
        <category>Data Structure</category>
        
        
      </item>
    
      <item>
        <title>回顾OCP 1Z0-816认证考试</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;群 OCA/OCP 考试交流QQ群 &lt;strong&gt;157563860&lt;/strong&gt;&lt;br /&gt;
其实这篇文章起源于 Twitter 上以为委瑞内拉小哥问我关于 OCP 考试的问题，我只好写这个作为回应。但中英夹杂，如果是国内读者看起来可能有点难受，改天再更新整理一下。 注意，现在 1Z0-816 考试已经没有了，只有 1Z0-819 考试。 另外前段时间我录了个视频，放在&lt;a href=&quot;https://www.bilibili.com/video/BV1ma4y1p7Dy&quot;&gt;B站小号这里&lt;/a&gt;，讲了一些关于考试的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I started with OCA Java SE 8 Programmer I exam last year, it took me 12 days to prepare the OCA exam. It was relatively easy to pass the OCA exam, but it was much harder to pass the OCP 11 exam. It took me roughly 3 months to get fully prepared for the ultimate 1Z0-816, namely Java SE 11 Programmer II exam, for which response to the Oracle Certified Professional: Java SE 11 Developer certification. This is by far the most difficult Java certification exam from Oracle/Sun, not just because it covers topics such as modules, functional programming, concurrent programming, IO. But also it includes some new objectives, like Java Secure Coding Guideline. For those who plan on taking the Oracle Java Certification exam, I strongly recommend you take a look at the official exam objectives before you start your study plan. Buy a good book, I think Selikoff’s book is great, I use that book for my exam preparation. Study the book chapter by chapter, or by topic, or whatever you want. Be sure to do the exercises, it will help you to consolidate your knowledge. It is also helpful to use flashcards to aid the memorization process, for example,  some core APIs or some syntax rules. Don’t go directly into the quiz without studying the materials thoroughly, that will be just a waste of time and energy. Because that’s very frustrating to see lots of errors. Take your time, start slowly, and gradually level up the difficulty.  Below are some useful references.&lt;/p&gt;

&lt;p&gt;&lt;!--more--&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;books参考书籍&quot;&gt;Books(参考书籍)&lt;/h3&gt;

&lt;p&gt;I recommend : &lt;a href=&quot;https://www.amazon.com/Oracle-Certified-Professional-Programmer-Study/dp/1119617626/ref=dp_ob_title_bk&quot;&gt;OCP Oracle Certified Professional Java SE 11 Programmer II Study Guide: Exam 1Z0-816 1st Edition&lt;/a&gt; by &lt;a href=&quot;https://www.amazon.com/Scott-Selikoff/e/B00PFTZJ6G/ref=dp_byline_cont_book_1&quot;&gt;Scott Selikoff&lt;/a&gt; (Author), &lt;a href=&quot;https://www.amazon.com/Jeanne-Boyarsky/e/B00PF6JTQK/ref=dp_byline_cont_book_2&quot;&gt;Jeanne Boyarsky&lt;/a&gt; (Author)（This title will be released on July 8, 2020.）&lt;/p&gt;

&lt;p&gt;我建议使用这本书作为考试参考。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.selikoff.net/2019/08/31/my-experience-taking-the-new-java-se-11-programmer-ii-1z0-816-exam/&quot;&gt;Selikoff Java SE 11 experience&lt;/a&gt; 书的作者的考试经验&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;While questions within a topic were relatively straight-forward, the amount of topics you had to know for the 1Z0-816 exam dwarfs the 1Z0-809 exam. Annotations, Security, Local Type Inference, Private/Static Interface Methods, and Modules are completely new.&lt;/p&gt;

  &lt;p&gt;尽管考试相关的主题相对来说是很直接的，但你在 1Z0-816 考试所需要知道的主题内容使得 1Z0-809 相形见绌。注解、安全、局部类型推导，接口的私有/静态方法，以及模块的内容都是全新的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you have time… （有时间还推荐） Java Language Features, Java The Complete Reference, Effective Java&lt;/p&gt;

&lt;h3 id=&quot;mock-exam-software模拟软件&quot;&gt;Mock exam software(模拟软件)&lt;/h3&gt;

&lt;p&gt;I used (我使用的是) &lt;a href=&quot;http://www.enthuware.com/java-certification-mock-exams/oracle-certified-professional/ocp-java-11-exam-ii-1z0-816&quot;&gt;OCP Java 11 - 1Z0-816 Mock Exams Practice Tests/Questions Part 2&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;oracle-website-pages官方页面&quot;&gt;Oracle website pages(官方页面)&lt;/h3&gt;

&lt;h4 id=&quot;technical技术相关&quot;&gt;Technical(技术相关)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Secure Coding Guidelines for Java SE&lt;/p&gt;

    &lt;p&gt;(页面已经更新了，排版比较现代了，而且小标题改为 Updated for Java SE 11 而不是 Java SE 13)&lt;br /&gt;
&lt;a href=&quot;https://www.oracle.com/java/technologies/javase/seccodeguide.html&quot;&gt;Secure Coding Guidelines for Java SE&lt;/a&gt;&lt;br /&gt;
Updated for Java SE 11&lt;br /&gt;
Document version: 7.2&lt;br /&gt;
Published: 27 September 2018&lt;br /&gt;
Last updated: 7 May 2019&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Java SE 11 API docs : &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/index.html&quot;&gt;Java® Platform, Standard Edition &amp;amp; Java Development Kit Version 11 API Specification&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;jls :  &lt;a href=&quot;https://docs.oracle.com/javase/specs/&quot;&gt;Java SE Specifications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/annotations/&quot;&gt;Annotations Trail&lt;/a&gt; : Learn something new about annotations since Java 8(学习 Java 8 以来更新的注解)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;About Online Proctored Exam(关于在线考试) &lt;a href=&quot;https://players.brightcove.net/2985902027001/r1ZNvX6Ux_default/index.html?videoId=6151284095001&quot;&gt;Get Ready for your Online Proctored Exam - Oracle Certification(Video)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://home.pearsonvue.com/oracle/onvue&quot;&gt;Oracle onvue&lt;/a&gt; Where to schedule an exam(考试报名地址  )&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://home.pearsonvue.com/oracle/op/faqs/&quot;&gt;Online Proctoring FAQs&lt;/a&gt;  常见问题&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://home.pearsonvue.com/Documents/Online-Proctored/online-proctored-policies.aspx&quot;&gt;pearsonvue online-proctored-policies&lt;/a&gt;  在线考试政策&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://education.oracle.com/home&quot;&gt;甲骨文大学&lt;/a&gt;  (Oracle University)主页&lt;/p&gt;

&lt;p&gt;Checkout more info about certification exams(关于认证考试本身的信息，我建议你去Oracle University官方网站看看，考试的信息和认证路径的信息。)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://education.oracle.com/java-se-8-programmer-i/pexam_1Z0-808&quot;&gt;OCA 808&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.oracle.com/certification/oracle-learning-subscription-eight-quick-tips&quot;&gt;Oracle Learning Subscriptions Eight Quick Tips&lt;/a&gt;   官方贴士&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/Gm1PqdbwBP0&quot;&gt;OnVUE Testing Experience&lt;/a&gt;  一个视频，在线考试的体验&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.oracle.com/certification/oracle-certification-exams-are-more-accessible-than-ever-before&quot;&gt;Oracle Certification Exams Are More Accessible Than Ever Before&lt;/a&gt;  同样是一个关于在线考试的文章&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.oracle.com/certification/your-guide-to-oracle-certification-testing-anywhere&quot;&gt;Your Guide to Oracle Certification Testing Anywhere&lt;/a&gt;  在线考试文章&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;考试复习大纲1z0-816-exam-objects-in-chinese&quot;&gt;考试复习大纲(1Z0-816 exam objects in Chinese)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Java 基础&lt;/strong&gt;&lt;br /&gt;
创建并使用 &lt;code&gt;final&lt;/code&gt; 类&lt;br /&gt;
创建并使用内部，嵌套，以及匿名类&lt;br /&gt;
创建并使用枚举&lt;br /&gt;
&lt;strong&gt;Java 接口&lt;/strong&gt;&lt;br /&gt;
创建并使用带有默认方法的接口&lt;br /&gt;
创建并使用带有私有方法的接口&lt;br /&gt;
函数式接口与 Lambda 表达式&lt;br /&gt;
定义并编写函数式接口&lt;br /&gt;
创建并使用 Lambda 表达式，包括 Lambda 语句，局部变量作 lambda 参数&lt;br /&gt;
&lt;strong&gt;内置函数式接口&lt;/strong&gt;&lt;br /&gt;
使用 &lt;code&gt;java.util.function&lt;/code&gt; 包里的接口&lt;br /&gt;
使用核心函数式接口，包括 &lt;code&gt;Predicate&lt;/code&gt;, &lt;code&gt;Consumer&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt; 和 &lt;code&gt;Supplier&lt;/code&gt;&lt;br /&gt;
使用 &lt;code&gt;java.util.function&lt;/code&gt; 包里基础接口的基本数据类型及二元变式&lt;br /&gt;
&lt;strong&gt;迁移到模块化应用&lt;/strong&gt;&lt;br /&gt;
迁移使用 Java SE 9 以前版本开发的应用到 SE 11，包括自上而下和自下而上迁移方式，将一个 Java SE 8 应用分模块作迁移&lt;br /&gt;
使用 &lt;code&gt;jdeps&lt;/code&gt; 确定依赖关系，并识别解决循环依赖的方法。&lt;br /&gt;
&lt;strong&gt;并发&lt;/strong&gt;&lt;br /&gt;
使用 &lt;code&gt;Runnable&lt;/code&gt;，&lt;code&gt;Callable&lt;/code&gt; 创建工作线程，并使用 &lt;code&gt;ExecutorService&lt;/code&gt; 并发地执行任务&lt;br /&gt;
使用 &lt;code&gt;java.util.concurrent&lt;/code&gt; 包里的容器和类，包括 &lt;code&gt;CyclicBarrier&lt;/code&gt; 和 &lt;code&gt;CopyOnWriteArrayList&lt;/code&gt;&lt;br /&gt;
编写线程安全的代码&lt;br /&gt;
识别线程问题，例如死锁和活锁&lt;br /&gt;
&lt;strong&gt;I/O (基础以及 NIO2)&lt;/strong&gt;&lt;br /&gt;
使用 I/O 流从控制台和文件读写数据&lt;br /&gt;
使用 I/O 流读写文件&lt;br /&gt;
使用序列化读写对象&lt;br /&gt;
使用 &lt;code&gt;Path&lt;/code&gt; 接口操作文件和目录路径&lt;br /&gt;
使用 &lt;code&gt;Files&lt;/code&gt; 类去检查、删除、复制或移动一个文件或目录&lt;br /&gt;
结合 &lt;code&gt;Files&lt;/code&gt; 类使用 Stream API&lt;br /&gt;
&lt;strong&gt;JDBC 数据库应用&lt;/strong&gt;&lt;br /&gt;
使用 JDBC URLs 和 &lt;code&gt;DriverManager&lt;/code&gt; 连接到数据库&lt;br /&gt;
使用 &lt;code&gt;PreparedStatement&lt;/code&gt; 去执行 CRUD 操作&lt;br /&gt;
使用 &lt;code&gt;PreparedStatement&lt;/code&gt; 和 &lt;code&gt;CallableStatement&lt;/code&gt; APIs 去执行数据库操作&lt;br /&gt;
&lt;strong&gt;注解&lt;/strong&gt;&lt;br /&gt;
表述注解的用途以及典型使用模式&lt;br /&gt;
应用注解到类和方法&lt;br /&gt;
描述 JDK 中常用的注解&lt;br /&gt;
声明自定义注解&lt;br /&gt;
异常处理与断言&lt;br /&gt;
使用 try-with-resources 结构&lt;br /&gt;
创建并使用自定义异常类&lt;br /&gt;
使用断言测试不变性&lt;br /&gt;
&lt;strong&gt;泛型与容器&lt;/strong&gt;&lt;br /&gt;
使用包装类，自动装箱和自动拆箱&lt;br /&gt;
用钻石记号和通配符创建并使用泛型类、方法&lt;br /&gt;
描述容器框架并使用主要容器接口&lt;br /&gt;
使用 &lt;code&gt;Comparator&lt;/code&gt; 和 &lt;code&gt;Comparable&lt;/code&gt; 接口&lt;br /&gt;
创建并使用容器的便利方法&lt;br /&gt;
&lt;strong&gt;Java Stream API&lt;/strong&gt;&lt;br /&gt;
描述 Stream 接口和管道&lt;br /&gt;
使用 lambda 表达式和方法引用&lt;br /&gt;
Streams 上的 Lambda 操作&lt;br /&gt;
使用 &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;peek&lt;/code&gt; 和 &lt;code&gt;flatMap&lt;/code&gt; 方法提取 stream 数据&lt;br /&gt;
使用 &lt;code&gt;findFirst&lt;/code&gt;, &lt;code&gt;findAny&lt;/code&gt;, &lt;code&gt;anyMatch&lt;/code&gt;, &lt;code&gt;allMatch&lt;/code&gt; 和 &lt;code&gt;noneMatch&lt;/code&gt; 方法搜索 stream 数据&lt;br /&gt;
使用 &lt;code&gt;Optional&lt;/code&gt; 类&lt;br /&gt;
使用 &lt;code&gt;count&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;average&lt;/code&gt; 和 &lt;code&gt;sum&lt;/code&gt; stream 操作执行计算&lt;br /&gt;
使用 lambda 表达式对容器排序&lt;br /&gt;
在 streams 使用 &lt;code&gt;Collectors&lt;/code&gt; ，包括 &lt;code&gt;groupingBy&lt;/code&gt; 和 &lt;code&gt;partitioningBy&lt;/code&gt; 操作&lt;br /&gt;
&lt;strong&gt;模块化应用中的服务&lt;/strong&gt;&lt;br /&gt;
描述服务的组件，包括指令&lt;br /&gt;
设计一个服务类型，使用 &lt;code&gt;ServiceLoader&lt;/code&gt; 加载服务，检查服务的依赖，包括消费者和提供者模块&lt;br /&gt;
&lt;strong&gt;并行 Streams&lt;/strong&gt;&lt;br /&gt;
编写使用并行 streams 的代码&lt;br /&gt;
用 streams 实现分解与归约操作&lt;br /&gt;
&lt;strong&gt;Java SE 应用安全编码&lt;/strong&gt;&lt;br /&gt;
在 Java 应用中预防拒绝服务&lt;br /&gt;
在 Java 应用中保护机密信息&lt;br /&gt;
实现数据一致性准则——注入和包含以及输入校验&lt;br /&gt;
通过限制可访问性和可扩展性保护代码受外部攻击，妥善处理输入校验以及可变性&lt;br /&gt;
安全地构建敏感对象&lt;br /&gt;
保护序列化与反序列化&lt;br /&gt;
&lt;strong&gt;本地化&lt;/strong&gt;&lt;br /&gt;
使用 &lt;code&gt;Locale&lt;/code&gt; 类&lt;br /&gt;
使用资源包&lt;br /&gt;
使用 Java 格式化消息、日期和数字&lt;/p&gt;
</description>
        <pubDate>Sun, 31 May 2020 06:32:00 +0000</pubDate>
        <link>https://blog.zwt.io/2020/05/31/Oracle-1Z0-816-exam-review/</link>
        <guid isPermaLink="true">https://blog.zwt.io/2020/05/31/Oracle-1Z0-816-exam-review/</guid>
        
        <category>Java</category>
        
        <category>Certification</category>
        
        
      </item>
    
      <item>
        <title>Java笔试题1</title>
        <description>&lt;h3 id=&quot;真题1-某知名互联网下载服务提供商软件工程师笔试题&quot;&gt;真题1 某知名互联网下载服务提供商软件工程师笔试题&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;一、选择题&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;1.&lt;/strong&gt; 访问修饰符作用范围由大到小是（ ）。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A.private-protected-default-public&lt;br /&gt;
B.public-protected-default-private&lt;br /&gt;
C.private-default-protected-public&lt;br /&gt;
D.public-default-protected-private&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这题没什么好说，当然是选择 &lt;strong&gt;B&lt;/strong&gt; 啦，初学的时候可能有点难记住，不过习惯了就记住了。后来越了解就更容易记住，根本不需要死记硬背。 &lt;code&gt;default&lt;/code&gt; 关键字，表示访问权限的时候，其实新的规范（8以上？）改称为 ‘package private’ 可以理解为包内私有访问权限，所以限制程度就是仅次于私有。接着protected和public容易，因为public肯定是范围最宽（大）的。&lt;br /&gt;
关于类的访问修饰符的作用范围，Java语言规范的 8.1.1 节有：&lt;br /&gt;
The access modifier &lt;code&gt;public&lt;/code&gt; pertains only to top level classes and member classes, not to local classes or anonymous classes.&lt;br /&gt;
The access modifier &lt;code&gt;protected&lt;/code&gt; and &lt;code&gt;private&lt;/code&gt; pertain only to member classes within a directly enclosing class declaration.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; 在Java 语言中，下面接口以键−值对的方式存储对象的是（ ）。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A.java.util.List&lt;br /&gt;
B.java.util.Map&lt;br /&gt;
C.java.util.Collection&lt;br /&gt;
D.java.util.Set&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;选 &lt;strong&gt;B&lt;/strong&gt; 这题也很直接。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; 以下不是Object 类的方法的是（ ）。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A.hashCode()&lt;br /&gt;
B.finalize()&lt;br /&gt;
C.notify()&lt;br /&gt;
D.hasNext()&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;选 &lt;strong&gt;D&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; 有如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class Test {
    public void change(String str, char ch[]) {
        str = &quot;test ok&quot;;
        ch[0] = 'g';
    }
    public static void main(String args[]) {
      String str = new String(&quot;good&quot;);
      char[] ch = { 'a', 'b', 'c' };
      Test ex = new Test();
      ex.change(str, ch);
      System.out.print(str + &quot; and &quot;);
      System.out.print(ch);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面程序的运行结果是（ ）。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A.good and abc&lt;br /&gt;
B.good and gbc&lt;br /&gt;
C.test ok and abc&lt;br /&gt;
D.test ok and gbc&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;选 &lt;strong&gt;B&lt;/strong&gt; 在 Java 语言中，除了8 种原始的数据类型（分别为 &lt;code&gt;byte&lt;/code&gt;、&lt;code&gt;short&lt;/code&gt;、&lt;code&gt;int&lt;/code&gt;、&lt;code&gt;long&lt;/code&gt;、&lt;code&gt;float&lt;/code&gt;、&lt;code&gt;double&lt;/code&gt;、&lt;code&gt;char&lt;/code&gt; 和 &lt;code&gt;boolean&lt;/code&gt;）外，其他的类型都是对象，在方法调用的时候，传递的都是引用。引用从本质上来讲也是按值传递，只不过传递的这个值是对象的引用而已，因此，在方法调用的时候，对形参引用所指对象属性值的修改对实参可见。但是对引用值本身的修改对实参是不可见的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二、填空题&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;1.&lt;/strong&gt; &lt;code&gt;Math.round(12.5)&lt;/code&gt; 的返回值等于（ &lt;strong&gt;13&lt;/strong&gt; ），&lt;code&gt;Math.round(-12.5)&lt;/code&gt; 的返回值等于（ &lt;strong&gt;-12&lt;/strong&gt; ）。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;round&lt;/code&gt; 是一个四舍五入的方法，12.5 的小数部分为 0.5，当对其执行 &lt;code&gt;Math.round()&lt;/code&gt; 操作时，结果需要四舍五入，所以，结果为 13；−12.5 的小数部分也为 0.5，当对
其执行 &lt;code&gt;Math.round()&lt;/code&gt; 操作时，结果也需要四舍五入，由于 −12 &amp;gt; −13，因此，结果为 −12。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; 有如下程序：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;String str1 = &quot;hello world&quot;;
String str2 = &quot;hello&quot; + new String(&quot;world&quot;);
System.out.println(str1 == str2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么程序的运行结果是（ &lt;strong&gt;false&lt;/strong&gt; ）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; 在Java 语言中，基本数据类型包括（ 浮点型 float、double ）、字符类型（ char ）、布尔类型 boolean 和 数值类型（byte、short、int、long ）。&lt;br /&gt;
&lt;strong&gt;4.&lt;/strong&gt; 字符串分为两大类：一类是字符串常量（ String ）；另一类是字符串变量（ StringBuffer ）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三、简答题&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;1.&lt;/strong&gt; 接口和抽象类有什么区别？&lt;/p&gt;

&lt;p&gt;答案：接口（interface）和抽象类（abstract class）是支持抽象类定义的两种机制（注意，该句中前后两个抽象类的意义不一样，前者表示的是一个实体，后者表示的是一个概念）。&lt;br /&gt;
两者具有很大的相似性，甚至有时候是可以互换的。但同时，两者也存在很大的区别。具体而言，接口是公开的，里面不能有私有的方法或变量，是用于让别人使用的，而抽象类是可以有私有方法或私有变量的，如果一个类中包含抽象方法，那么这个类就是抽象类。在Java 语言中，可以通过把类或者类中的某些方法声明为abstract（abstract 只能用来修饰类或者方法，不能用来修饰属性）来表示一个类是抽象类。接口就是指一个方法的集合，接口中的所有方法都没有方法体，在Java 语言中，接口是通过关键字interface 来实现的。包含一个或多个抽象方法的类就必须被声明为抽象类，抽象类可以声明方法的存在而不去实现它，被声明为抽象的方法不能包含方法体。在抽象类的子类中，实现方法必须含有相同的或者更低的访问级别（public-&amp;gt;protected-&amp;gt;private）。抽象类在使用的过程中不能被实例化，但是可以创建一个对象使其指向具体子类的一个实例。抽象类的子类为父类中所有的抽象方法提供具体的实现，否则，它们也是抽象类。接口可以被看作是抽象类的变体，接口中所有的方法都是抽象的，可以通过接口来间接地实现多重继承。接口中的成员变量都是static final
类型，由于抽象类可以包含部分方法的实现，所以，在一些场合下抽象类比接口存在更多的优势。接口与抽象类的相同点如下：&lt;br /&gt;
1）都不能被实例化。&lt;br /&gt;
2）接口的实现类或抽象类的子类都只有实现了接口或抽象类中的方法后才能被实例化。&lt;br /&gt;
接口与抽象类的不同点如下：&lt;br /&gt;
1）接口只有定义，不能有方法的实现，而抽象类可以有定义与实现，即其方法可以在抽象类中被实现。&lt;br /&gt;
2）实现接口的关键字为implements，继承抽象类的关键字为extends。一个类可以实现多个接口，但一个类只能继承一个抽象类，因此，使用接口可以间接地达到多重继承的目的。&lt;br /&gt;
3）接口强调特定功能的实现，其设计理念是“has-a”关系，而抽象类强调所属关系，其设计理念为“is-a”关系。&lt;br /&gt;
4）接口中定义的成员变量默认为public static final，只能够有静态的不能被修改的数据成员，而且，必须给其赋初值，其所有的成员方法都是public、abstract 的，而且只能被这两个关键字修饰。而抽象类可以有自己的数据成员变量，也可以有非抽象的成员方法，而且，抽象类中的成员变量默认为default，当然也可以被定义为private、protected 和public，这些成员变量可以在子类中被重新定义，也可以被重新赋值，抽象类中的抽象方法（其前有abstract修饰）不能用private、static、synchronized 和native 等访问修饰符修饰，同时方法必须以分号结尾，并且不带花括号{}。所以，当功能需要累积时，使用抽象类；不需要累积时，使用接口。&lt;br /&gt;
5）接口被运用于实现比较常用的功能，便于日后维护或者添加删除方法，而抽象类更倾向于充当公共类的角色，不适用于日后重新对里面的代码进行修改。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; 实现多线程的方法有哪几种？&lt;/p&gt;

&lt;p&gt;答案：Java 虚拟机（Java Virtual Machine，JVM，是运行所有Java 程序的抽象计算机，是Java 语言的运行环境）允许应用程序并发地运行多个线程。在Java 语言中，多线程的实现一般有以下三种方法：&lt;br /&gt;
1）实现Runnable 接口，并实现该接口的run()方法。&lt;br /&gt;
以下是主要步骤：
① 自定义类并实现Runnable 接口，实现run()方法。&lt;br /&gt;
② 创建Thread 对象，用实现Runnable 接口的对象作为参数实例化该Thread 对象。&lt;br /&gt;
③ 调用Thread 的start()方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; 利用递归方法求6!&lt;/p&gt;

&lt;p&gt;答案：本题考查的是递归知识。&lt;/p&gt;

&lt;p&gt;使用递归时，关键问题是要明白递归表达式的含义以及递归的终止条件。&lt;/p&gt;

&lt;p&gt;实现代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class Test {
    public static long fac(int n) {
        if(n &amp;gt; 1)
            return (n * fac(n - 1));
        else
            return 1;
    }
    public static void main(String[] args) {
        System.out.println(fac(6));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;程序运行的结果为&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;720&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; 用Java 语言实现一个观察者模式。&lt;br /&gt;
答案：观察者模式（也被称为发布/订阅模式）提供了避免组件之间紧密耦合的另一种方法，它将观察者和被观察的对象分离开。在该模式中，一个对象通过添加一个方法（该方法允许另一个对象，即观察者注册自己）使本身变得可观察。当可观察的对象更改时，它会将消息发送到已注册的观察者。这些观察者收到消息后所执行的操作与可观察的对象无关，这种模式使得对象可以相互对话，而不必了解原因。Java 语言与C#语言的事件处理机制就是采用的此种设计模式。例如，用户界面（同一个数据可以有多种不同的显示方式）可以作为观察者，业务数据是被观察者，当数据有变化后会通知界面，界面收到通知后，会根据自己的显示方式修改界面的显示。面向对象设计的一个原则是：系统中的每个类将重点放在某一个功能上，而不是其他方面。一个对象只做一件事情，并且将它做好。观察者模式在模块之间划定了清晰的界限，提高了应用程序的可维护性和重用性。设计类图如图1 所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/image-20200531042853475.png&quot; alt=&quot;image-20200531042853475&quot; /&gt;&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;图1👆&lt;/div&gt;

&lt;p&gt;具体的实现代码的继承关系如图2所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/observer-pattern.png&quot; alt=&quot;observer-pattern&quot; /&gt;&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;图2👆&lt;/div&gt;

&lt;p&gt;下面给出一个观察者模式的示例代码，代码的主要功能是实现天气预报，同样的温度信息可以有多种不同的展示方式：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package io.zwt.observer;

public interface Subject {
    void registerObserver(Observer o);
    void removeObserver(Observer o);
    void notifyObservers();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package io.zwt.observer;

public interface Observer {

    // 更新温度
    void update(float temp);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package io.zwt.observer;

import java.util.ArrayList;

public class Whether implements Subject {

    private final ArrayList&amp;lt;Observer&amp;gt; observers = new ArrayList&amp;lt;&amp;gt;();
    private float temperature;

    @Override
    public void registerObserver(Observer o) {
        this.observers.add(o);
    }

    @Override
    public void removeObserver(Observer o) {
        this.observers.remove(o);
    }

    @Override
    public void notifyObservers() {
        for (Observer observer : this.observers) {
            observer.update(temperature);
        }
    }

    public void whetherChange() {
        this.notifyObservers();
    }

    public float getTemperature() {
        return temperature;
    }

    public void setTemperature(float temperature) {
        this.temperature = temperature;
        notifyObservers();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package io.zwt.observer;

public class WhetherDisplay1 implements Observer {

    private float temperature;

    public WhetherDisplay1(Subject whether) {
        whether.registerObserver(this);
    }

    @Override
    public void update(float temp) {
        this.temperature = temp;
        display();
    }

    private void display() {
        System.out.println(&quot;display1****:&quot; + this.temperature);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package io.zwt.observer;

public class WhetherDisplay2 implements Observer {

    private float temperature;

    public WhetherDisplay2(Subject whether) {
        whether.registerObserver(this);
    }

    @Override
    public void update(float temp) {
        this.temperature = temp;
        display();
    }

    private void display() {
        System.out.println(&quot;display1----:&quot; + this.temperature);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; 一个有10 亿条记录的文本文件，已按照关键字排好序存储，请设计一个算法，可以从文件中快速查找指定关键字的记录。&lt;/p&gt;

&lt;p&gt;答案: 10 亿条记录对应的数量在 GB 量级,对于普通的计算机来讲,没有这么大的内存空间供使用,因此,无法一次把这些数据信息全部都读到内存中进行处理,需要对问题进行分解,例如把数据分成 100 份,每一份就是 100MB 量级,基本上放入内存无压力了.&lt;/p&gt;

&lt;p&gt;把这 10 亿条记录,均分为 100 份, 把每份的第一条记录关键字和此纪录对应的文件偏移量先扫入内存(类似索引),这里需要磁盘随机 IO 100 次.&lt;/p&gt;

&lt;p&gt;这样可以马上定位出指定关键字所在的记录块,把相应的记录块拿到内存,二分查找即可.&lt;/p&gt;
</description>
        <pubDate>Sun, 10 May 2020 20:02:00 +0000</pubDate>
        <link>https://blog.zwt.io/2020/05/10/java-interview-test1/</link>
        <guid isPermaLink="true">https://blog.zwt.io/2020/05/10/java-interview-test1/</guid>
        
        <category>Java 笔试</category>
        
        
      </item>
    
  </channel>
</rss>
